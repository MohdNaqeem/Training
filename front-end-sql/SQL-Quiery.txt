=> To create Database 
   query : create Database DatabaseName
   SQL database or relational database is a collection of highly structured tables, wherein each row reflects a data entity, 
   and every column defines a specific information field. Relational databases are built using the structured query language  
   (SQL) to create, store, update, and retrieve data.

=> To alter Database name
   query : Alter Database DatabaseName1 Modify Name = DatabaseName2

=> To drop/delete Database
   query : Drop Database sample4

=> To create Table
   query : create Table TableName
   Tables are database objects that contain all the data in a database. In tables, data is logically organized in a row-and-column 
   format similar to a spreadsheet. 

=> To put value into table
   query : insert into TableName values(put value inside bracket)
   query : insert into TableName (ID, Name, Address, GenderID) values (3,'Raza','Banglore',2)

=> Foreign Key
   A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table. The table with 
   the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.

=> Primary Key
   The primary key in SQL is a single, or a group of fields or columns that can uniquely identify a row in a table. Putting it simply, 
   it is a column that accepts unique values for each row.

=> To Add default constraint
   query :  Alter TABLE TableName 
            ADD CONSTRAINT ConstraintName
            DEFAULT Constraint(defaultValue) FOR ColumnName

=> Cascading referential integrity
   Cascading referential integrity constraints allow you to define the actions when a user tries to delete or update a key for which 
   foreign keys exist. Cascading is used with the drop command when we want to drop a parent table, even when a child table exists.

=> To alter table customer
   query : add TableName (datatype)

=> To Delete a column
   query : alter table TableName 
   query : drop column columnName

=> To see the table using query
   query : Select * from TableName

=> To delet the row from table
   query : Delete from tableName where ID = row ID   

=> Joins
   Joins indicate how SQL Server should use data from one table to select the rows in another table. A join condition defines the 
   way two tables are related in a query by: Specifying the column from each table to be used for the join.
   There are four types of join
   1. Inner Join / join
   2. Left Outer join / Left Join
   3. Right Outer Join / Right Join
   4. Full Outer Join / Full Join

=> Inner Join
   Inner Join returns only the matching rows between both the tables. Non matching rows are eliminated.
   query : Select tblColumn1, tblColumn2, tblColumn3, tblColumn4(Which column we want to join with table)
           from tableName1
           INNER JOIN tableName2
	   ON tableName1.tableColumn = tableName2.tableColumn
   
=> Left Join
   returns all the matching rows plus non matching rows from the table.
   query : Select tblColumn1, tblColumn2, tblColumn3, tblColumn4(Which column we want to join with table)
           from tableName1
           LEFT OUTER JOIN tableName2
	   ON tableName1.tableColumn = tableName2.tableColumn

   *When we have to get only non matching rows from the left table this query have to use.
   query : Select tblColumn1, tblColumn2, tblColumn3, tblColumn4(Which column we want to join with table)
           from tableName1
           LEFT OUTER JOIN tableName2
	   ON tableName1.tableColumn = tableName2.tableColumn
           where stdG.ID is NULL

=> Right Join
   returns all the matching rows plus non matching rows from the right table.
   query : Select tblColumn1, tblColumn2, tblColumn3, tblColumn4(Which column we want to join with table)
           from tableName1
           RIGHT OUTER JOIN tableName2
	   ON tableName1.tableColumn = tableName2.tableColumn

   *When we have to get only non matching rows from the right table this query have to use.
   query : Select tblColumn1, tblColumn2, tblColumn3, tblColumn4(Which column we want to join with table)
           from tableName1
           RIGHT OUTER JOIN tableName2
	   ON tableName1.tableColumn = tableName2.tableColumn
           where stdG.ID is NULL

=> Full Join
   returns all rows from both the left and right tables, including the non matching rows.
   query : Select tblColumn1, tblColumn2, tblColumn3, tblColumn4(Which column we want to join with table)
           from tableName1
           FULL OUTER JOIN tableName2
	   ON tableName1.tableColumn = tableName2.tableColumn

   *When we have to get only non matching rows from the right and left table this query have to use.
   query : Select tblColumn1, tblColumn2, tblColumn3, tblColumn4(Which column we want to join with table)
           from tableName1
           FULL OUTER JOIN tableName2
	   ON tableName1.tableColumn = tableName2.tableColumn
           where stdG.ID is NULL
   
=> Self Join
   A self join in SQL Server is a join operation where a table is joined with itself. This allows you to compare 
   rows within the same table based on related columns.

=> Cross Join
   CROSS JOINs are used to combine each row of one table with each row of another table, and return the Cartesian product 
   of the sets of rows from the tables that are joined.

=> Stored Procedure
   A stored procedure is a group of T-SQL(Transact SQL) statements. if you have a situation, where you wirte the same 
   query over and over again, you can save that specific query as a stored procedure and call it just by it's name.

   query : CREATE PROCEDURE spgetStdIdName
           AS
           BEGIN
	   Select ID, Name from StdTbl
           END

   With Parameter
   query : CREATE PROC spGetEmployeeNameAndGender
           @Name nvarchar(20),
           @Gender int
           as
           Begin 
           Select Address , Name , GenderID from StdTbl where Name = @Name
           and GenderID = @Gender
           END
   here when we print table using SP so we have to pass parameter in order or with parameter name otherwise it will throw error.

=> UNION and UNION All :
   UNION and UNION All operators in sql server are used to combine result set of two or more SELECT queries.

   query : Select * from tblName
	   UNION / UNION All
	   Select * from tblName2

	* Difference between UNION and UNION All
          1. UNION removes duplicate rows, where as UNION All does not.
	  2. UNION has to perform sort to remove duplicates, which makes it less faster than UNION All.

	* Note : To combine the result between two table, in both tables mush have same number of column otherwise it will show error and datatype also should 
	         same otherwise it will show error.

	* Difference between UNION and JOIN
	  UNION combines the result set of two or more select queries into a single result set which includes all the rows from all the queries in the union.
	  where as JOINS retrieve data from two or more table based on logical relationship between the table.
	
	  In short UNION combines rows from tables, where JOINS combine columns from 2 or more table.

=> Identity Column 
   An identity column is a numeric column in a table that is automatically populated with an integer value each time a row is inserted. 

   Note : Seed and Increament value are optional if you don't specify the identity and seed they both default 1.

   Increament : We set it for how many number we want to add each time in rows

   Seed : we set it for from where we have to start index.

=> Unique Key :
   we use UNIQUE constraint to enforce uniqueness of a column, the column should not allow any duplicate values. We can add a unique constraint through the 
   designer or query.

	* What is difference between Unique key and Primey key constraint ?
          1. A table can have only one primary key, but more than one unique key.
	  2. Primary key doesn't allows null, where as unique key allows one null.

   query : Alter Table tblName
           Add Constraint UQ_tblName_cloumnName Unique (cloumnName)

=> Select Statement :

	* SELECT KEYWORD :
 	  A SELECT statement retrieves zero or more rows from one or more database tables or database views.
   
	* DISTINCT KEYWORD :
          It is helpful when there is a need to avoid duplicate values present in any specific columns/table.

		query : Select DISTINCT columnName from tblName 
                This query will only print unique value from column.

	* WHERE clause :
          The WHERE clause specifies criteria that field values must meet for the records that contain the values to be included in the query results.

		query : Select * from tblName where clmName = 'Naqeem'
		This query will print only Naqeem how many column will be have it will print.

		query : Select * from tblName where clmName != 'Naqeem' or query : Select * from tblName where clmName <> 'Naqeem'
		This query will print all the recored except Naqeem. In sql its mean (!= or <>) not equal.

	* IN operator :
	  	query : Select * from tblName where clmName(Age) IN (20 or 23 or 29)
		This query will only print this record.

	* BETWEEN operator
		query : Select * from tblName where clmName(Age) BETWEEN 20 AND 25	
		This query will print all those record which will be between 20 and 25.

=> Group By :
   Group by clause is used to group a selected set of rows into a set of summary rows by the values of one or more column or expressions. It is always used in
   conjunction with one or more aggregate functions.

=> Coalesce Function
   The COALESCE function in SQL is used to return the first non-null value in a list of expressions. It takes multiple parameters and returns the value of the 
   first non-null expression in the parameter list. If all expressions are null, COALESCE returns null.

   query : Select Id, COALESCE(clmName1, clmName2, clmName3) as clmName(in which we want result) 
 	   from tblName

=> Indexes :
   Indexes are used by queries to find data from tables quickly. Indexes are created on table views. Index on a table or a view is very similar to an index that 
   we find in a book.

		
	
		
   
   