=> Command of download angular and run it on browser
   npm install @angular/cli@15
   ng new ProjectName
   cd ProjectName
   ng serve 

=> What is binding?
   Data binding in Angular is a mechanism that synchronizes the data between the model and the view. There are two types: one-way binding (interpolation, property binding) and two-way binding (using ngModel).
   
=> There are three syntax of binding 
   Interpolation
   Property binding
   Event binding

=> What is interpolation and binding.
   In AngularJS, Interpolation is a way to transfer the data from a TypeScript code to an HTML template 
   (view), i.e. it is a method by which we can put an expression in between some text and get the value 
   of that expression. Interpolation basically binds the text with the expression value. 
   interpolation just work in the case of number, numeric value and string it doesn't work in the 
   case of boolean.
   Syntax : propertyName={{VariableandFuntionName}} , {{VariableandFuntionName}}

=> What is property binding
   Property binding in Angular helps you set values for properties of HTML elements or directives. Use 
   property binding to do things such as toggle button features, set paths programmatically, and share 
   values between components.
   where we have to change the value of data and disabled then in this case we have to use property binding
   Sntax : [propertyName]=VariableandFunctionName

=> What is event binding
   Event binding lets you listen for and respond to user actions such as keystrokes, mouse movements, 
   clicks, and touches. See the live example / download example for a working example containing the code 
   snippets in this guide.

=> What is directives.
   An Angular directive is a speacial type of technology that can manipulate the DOM object. Directives can do adding html elements and removing html from DOM dynamically. 

=> Types of directive:
   Component directive
   Structural directive
   Attribute directive
   Custom directive

=> What is component directive?
   The most significant directives in Angular are called components. It is a component directive that highlights elements in the DOM. This type of directive has a template or template URLs.

=> What is structural directives?
   Structural directives are directives which change the DOM layout by adding and removing DOM elements. Angular provides a set of built-in structural directives (such as NgIf , NgForOf , NgSwitch and others) which are commonly used in all Angular projects. For more information see Built-in directives.

=> What is Attribute directives?
   Attribute directives change the appearance or behavior of an element, component, or another directive.

=> What is Custom directive?
   We can create our custom directive from scratch.

=> Built Directives
   *ngIf
   *ngFor
   *ngSwitch  
   *ngClass
   *ngStyle

=> ngIf
   The ngIf directive removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to ngIf evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.

=> ngFor
   ngFor is a structural directive used for rendering a set of elements or repeating a template for each item in a collection. The ngFor directive is commonly used to iterate over arrays or lists and generate HTML elements dynamically based on the data in the collection.

=> ngSwitch
   The ngSwitch directive is used for conditional rendering in Angular templates, providing a way to switch between multiple cases based on the value of an expression.

=> ngClass
   The ng-class directive dynamically binds one or more CSS classes to an HTML element. The value of the ng-class directive can be a string, an object, or an array. If it is a string, it should contain one or more, space-separated class names.

=> ngstyle
   The ng-style directive specifies the style attribute for the HTML element. The value of the ng-style attribute must be an object, or an expression returning an object. The object consists of CSS properties and values, in key value pairs. 

=> What is pipes ?
   Angular Pipes allows its users to change the format in which data is being displayed on the screen. For instance, consider the date format. Dates can be represented in multiple ways, and the user can decide which one to use with the help of Angular Pipes.

   DatePipe      {{ currentDate | date:'medium' }}
   UpperCasePipe {{ textToTransform | uppercase }}
   LowerCasePipe {{ textToTransform | lowercase }}
   CurrencyPipe  {{ price | currency:'USD':true }} 
   DecimalPipe   {{ someNumber | number:'2.2-2' }}
   PercentPipe   {{ percentageValue | percent:'2.2-2' }} 
   SlicePipe     {{ array | slice:1:5 }}
   AsyncPipe     {{ asyncData | async }}
   JsonPipe      {{ jsonData | json }}

=> How to add bootstrap in our project ?
   first we have to install bootstrap using command in terminal "npm install bootstrap".
   then we have to inject this link "node_modules/bootstrap/dist/css/bootstrap.min.css" in our "angular.json in styles".
   after this we have to inject this link @import "~bootstrap/dist/css/bootstrap.css"; in our global css.
   
=> What is Life cycle hooks?
   Lifecycle hooks are a set of methods in Angular that are executed at specific moments during the lifecycle of a component. These methods provide a way to tap into the Angular component lifecycle and perform custom logic or operations at specific points in time.
   - Angular components doesn't use all the components at once. It only uses the one or more which are required.
   - Whenever angular needs to use a component, it creates a new instance of that component and start using it in DOM
     once the  uses is done it destroy this instance and removed from DOM
   - During this process (create instance to destroy) there are several stages that angular covers and this is 
     called as component life cycle or life cycle hooks.

=> Types of life cycle hooks
   ngOnChanges
   ngOnInit
   ngDoCheck
   ngAfterContentInit
   ngAfterContentChecked
   ngAfterViewInit
   ngAfterViewChecked
   ngOnDestroy

=> ngOnchanges
   onChanges lifecycle hook is called when any data-bound property of a directive changes. You use it by defining an ngOnChanges() method to handle the changes. It is usually called first before ngOnInit and then subsequently after any input property changes.

=> ngOnInit
   Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component's input properties. It called only ones after ngOnchanges.

=> Constructor uses :
   - Inject any service 
   - Initialize the feilds
   - Do not perform any logic here.

=> ngOnInit uses : 
   - Perform the component specific operations like:
     - Make call to API for page load
     - Any logic that you need to perform at very first as the component gets instantiated.

=> What is change detection?
   The purpose of this mechanism is to make sure the underlying views are always in sync with their corresponding models. This core feature of Angular is what makes the framework tick and is partly the reason why Angular is a neat choice for developing modern web apps.