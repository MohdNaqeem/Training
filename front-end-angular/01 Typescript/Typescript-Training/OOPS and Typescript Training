/ *
What is OOP? 

https://dotnettutorials.net/lesson/object-oriented-programming-csharp/
https://dev.to/rajrathod/ mastering-object-oriented-programming-with-typescript-encapsulation-abstraction-inheritance-and-polymorphism-explained-c6pk

Object Oriented Programming language(OOPS):-
It is a methodology to write the program where we specify the code in form of classes and objects.

=> Why do we need Oops?
Object oreinted programing help us to think in terms of real world objects.

=> What are the important pillars of oops?

There are Seven important pilars of oops.

Object
Class
Encapsulation  - Hide complexity, which should not be shows outside the object it hide that.
Abstraction  - It shows only what is neccesary.
Polymorphism  - have same name but multiple purpose. Example overloading method.
Inheritance  - Parent child relationship, where we have something common in the parent and the child can inherit and add something more to it

/*

01 - Object

Objects are instances of classes. They are created using the new keyword followed by the class name. Objects have their own set of properties and can invoke the methods defined in the class.

02 -  Class

Class is a user defined data type. it is like a template. In c# variable are termed as instances of classes. which are the actual objects.

Types of classes

03 ENCAPSULATION

- hide the complexitiy its called ENCAPSULATION we can implement by access modifer
- Encapsulation provides the ability to hide the internal details of an object from its users.The concept of encapsulation is also known as data hiding or information hiding. In c# , Encapsulation is implemented using the access modifier keywords.
-  Access Modifier TypeScript supports three access modifiers - public, private, and protected.

04  Abstraction -

- Abstraction happens during desgin phase what has to show public during execution phase developer uses encapsulation to implement abstraction to uses access modifiers.

05 Polymorphism

        Have same name but multiple purpose 

        Two types of polymorphism - 

        1 Static  Polymorphism  (Compile Time  Polymorphism)
            
            Method overloading

            => What is method overloading?
                
                Method with same names with diffrent signatures.

           

        2 Dynamic Polymorphism  ( Run Time Polymorphism)



            Method Overriding

                What is the use of virtual keyword?
                
                Virtual keyword help us to define some logic in the parent class which can be overridden in the child class

            => What is overriding ? 
              
              Using virtual keyword and overriding we can write our own logic in child class with same function name .


            Interface

            Abstract Class


Inheritance -

Inheritance is one of the core principal of oops where we can define a parent(base class) and a child(drive class) relationship between two orm more classes.

Types of Inheritance



Interface and Abstract class 

https://www.c-sharpcorner.com/UploadFile/d0e913/abstract-class-interface-two-villains-of-every-interview/
https://www.c-sharpcorner.com/UploadFile/d0e913/abstract-class-interface-two-villains-of-every-interview756/


Static classes and method

Constructor -
The Constructor is a method in a typescript class that automatically gets called when the class is being instantiated. Constructor always run before any lifecycle hook and it's not a part of lifecycle hooks.
Constructor is used to inject dependencies or services into the component class.

*/

/*

Typescript training notes :

=> What is TypeScript?
   TypeScript is a superset of JavaScript; i.e., it includes all the elements of JavaScript & some other features 
   as well. TypeScript is an open-source programming language that is developed and maintained by 
   Microsoft. it is converted into JavaScript. The trans compiler known as a source-to-source compiler. 
   
=> Why TypeScript?
   There are several reasons why one should use TypeScript.
    - It is an open-source programming language.
    - It supports cross-platform development.
    - Optional static typing means it detects the errors while writing the script.

=> What are Variables?
   Variables are the names used in the programming language, and they have some values associated with
   their data types. Values can be changed during the execution of the program. The variable name itself
   explains that value can be vary/changed any time. A variable name should be meaningful so anyone can
   understand the code easily.

=> Why use variables?
   As we know by using programming languages, we can create an application, or we create a structure that
   is being used by day to day activities. The application can be used to store some data, perform some
   actions on this data, or give us a report.

=> Variable Declaration.
   Variables can store single values & this can be changed any time during execution of the program. Variable
   declaration by using var keyword is as it is in JavaScript. 
      Syntax: var [variable_name] = [optional-value];
            Or in typescript we can define like
      var [variable_name] :[data-type]= [optional-value];

=> Why let & const in TypeScript?
   let & const are the new variable declarations used in TypeScript. These come into the picture to resolve
   problems in the var declaration. let is used to declare a block-scoped variable which means anything
   declared within the {} is block-scoped. static type checking is possible by using let variable declaration, so
   while writing the script the developer can get suggestions/ warnings, etc. const is similar to let, except
   we cannot update or re-declare it. 

=> Data Types in TypeScript
   - number
   - string
   - boolean
   - tuples
   - union
   - any
   - void
   - null & undefined
   - never

=> What is the number?
   Numbers are the digits used in the programming language; a Number is an object which holds the numeric
   values & which are meaningful. TypeScript supports decimal, hexadecimal, octal, binary as well whenever
   required. In general, suppose we consider a landline or mobile phone & everyone has a unique number
   which is a combination of some digits.





















*/

